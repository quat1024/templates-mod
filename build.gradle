buildscript {
	repositories {
		maven {
			name = "Fabric"
			url = "https://maven.fabricmc.net/"
			content {
				includeGroup "net.fabricmc"
				includeGroup "fabric-loom"
			}
		}
		mavenCentral()
	}
	dependencies {
		classpath "fabric-loom:fabric-loom.gradle.plugin:1.9.2"
	}
}

apply plugin: "fabric-loom"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 17
}

sourceSets {
	main
	generated
	dgen {
		java {
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += sourceSets.main.runtimeClasspath
			//also see dependencies { dgenImplementation ... } below
		}
	}
}

task dgen(type: JavaExec) {
	classpath = sourceSets.dgen.runtimeClasspath
	mainClass = "io.github.cottonmc.templates.dgen.Dgen"
	args = [sourceSets.generated.getResources().srcDirs.iterator().next().toString()]
}

repositories {
	mavenCentral()

	maven {
		url = "https://maven.terraformersmc.com/releases/"
		content {
			includeGroup "com.terraformersmc"
		}
	}
}

dependencies {
	dgenImplementation sourceSets.main.output
	
	minecraft "com.mojang:minecraft:1.20.1"
	mappings "net.fabricmc:yarn:1.20.1+build.10"
	modApi "net.fabricmc:fabric-loader:0.16.10"
	
	//See also fabric.mod.json
	String fapiVer = "0.92.3+1.20.1"
	List<String> modules = [
		"fabric-api-base",
		"fabric-renderer-api-v1", //FRAPI
		"fabric-rendering-v1", //not frapi
		"fabric-item-group-api-v1",
		"fabric-blockrenderlayer-v1",
		"fabric-object-builder-api-v1",
		"fabric-block-api-v1",
		"fabric-block-view-api-v2",
		"fabric-models-v0", //TODO: Deprecated module (maybe in ABI)
		
		//"Soft" dependencies (not in fabric.mod.json since they are replacable)
		"fabric-registry-sync-v0", //Just needed to unfreeze registries
		"fabric-renderer-indigo", //Any FRAPI implementation should do
	]
	for(String module : modules) {
		modApi fabricApi.module(module, fapiVer)
	}
	
	//Keeping this deprecated module around to avoid an ABI break, not used throughout the code
	modCompileOnly fabricApi.module("fabric-rendering-data-attachment-v1", fapiVer)
	
	//Some mods I want to test in-dev depend on fabric api though...
	modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${fapiVer}"

	implementation "com.google.code.findbugs:jsr305:3.0.2"

	//modRuntimeOnly "com.terraformersmc:modmenu:7.2.1" //REMAP FAILURES?????
}

loom {
	mixin {
		defaultRefmapName = "templates.refmap.json" //see templates.mixins.json. I just like to always specify the name
	}
}

processResources {
	
	from sourceSets.generated.resources
	
	inputs.property "version", project.version
	filesMatching("**/fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	from "LICENSE"
}
